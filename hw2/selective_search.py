''' selective_search.py '''
import cv2
import numpy as np
import argparse
import re
import os
from utils import *

''' Applies selective search algorithm on a given image with specified strategy.

Args:
    img: provided input image.
    strategy: similarity strategy used by the selective search algorithm.

Returns:
    bboxes: a list of bounding boxes generated by selective search.
'''
def apply_ss(img, strategy):
    # define color strategies
    stra_color = cv2.ximgproc.segmentation.createSelectiveSearchSegmentationStrategyColor()
    stra_texture = cv2.ximgproc.segmentation.createSelectiveSearchSegmentationStrategyTexture()
    stra_size = cv2.ximgproc.segmentation.createSelectiveSearchSegmentationStrategySize()
    stra_fill = cv2.ximgproc.segmentation.createSelectiveSearchSegmentationStrategyFill()
    stra_multi = cv2.ximgproc.segmentation.createSelectiveSearchSegmentationStrategyMultiple(stra_texture, stra_color, stra_size, stra_fill)

    ss = cv2.ximgproc.segmentation.createSelectiveSearchSegmentation()

    ss.clearStrategies()
    if strategy == 'color':
        ss.addStrategy(stra_color)
    elif strategy == 'texture':
        ss.addStrategy(stra_texture)
    else:
        ss.addStrategy(stra_multi)

    ss.setBaseImage(img)

    ss.switchToSelectiveSearchFast()
    
    # perform selective search and convert bboxes to xyxy format
    bboxes = [bbox_xywh_to_xyxy(bbox) for bbox in ss.process()]

    return bboxes

''' Main program that runs a single experiment and saves output files. '''
def main():
    # declare command line args
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--imgdir', type=str, default=None, help='directory to source images.')
    parser.add_argument('--gtdir', type=str, default=None, help='directory to ground truth xml files.')
    parser.add_argument('--outdir', type=str, default=None, help='directory to save output data.')
    parser.add_argument('--max_rects', type=int, default=100, help='max number of boxes to show.')
    parser.add_argument('--strategy', type=str, default='multi', help='color strategy for ss.')
    parser.add_argument("--show_img", help='show image results', action="store_true")
    args = parser.parse_args()

    # name experiment and create output directory
    exp_name = '{}_{}'.format(args.strategy, args.max_rects)
    mkdir(args.outdir)

    # loop through all files in input directory and apply selective search algorithm
    files = os.listdir(args.imgdir)
    for filename in files:
        if filename.endswith('jpg'):
            # get ground truth boxes
            gt_path = os.path.join(args.gtdir, filename[:-3] + 'xml')
            gt_bboxes = extract_bboxes_from_xml(gt_path)

            # read image
            img_path = os.path.join(args.imgdir, filename)
            img = cv2.imread(img_path)

            # apply meanshift on image
            pred_bboxes = apply_ss(img, args.strategy)
            display_pred_boxes = pred_bboxes[:min(len(pred_bboxes), args.max_rects)]
            precision, recall, correct_bboxes = eval_iou(pred_bboxes, gt_bboxes)

            # add bboxes to image
            img_bbox = draw_bboxes_on_image(display_pred_boxes, img, color='g')
            img_correct_bbox = draw_bboxes_on_image(display_pred_boxes, img, color='g')
            img_correct_bbox = draw_bboxes_on_image(correct_bboxes, img_correct_bbox, color='r')

            # output annotated images
            cv2.imwrite(os.path.join(args.outdir, exp_name + '-' + filename[:-4] + '_bbox.jpg'), img_bbox)
            cv2.imwrite(os.path.join(args.outdir, exp_name + '-' + filename[:-4] + '_correct_bbox.jpg'), img_correct_bbox)

            # show image if requested
            if args.show_img:
                window_name = 'SS Result for {}'.format(filename)
                show_img(window_name, img_bbox)

            # print experiment result
            print('Experiment {}, file {}: p={}; r={}'.format(exp_name, filename, precision, recall))

if __name__ == '__main__':
    main()